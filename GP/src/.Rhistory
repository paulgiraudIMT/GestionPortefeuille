mean.var.plot(mu, sigma, Rho)
rho <- -1
Rho <- matrix(c(1,rho,rho,1),nrow=2)
mean.var.plot(mu, sigma, Rho)
par(mfrow=c(2,2))
rho <- 1
Rho <- matrix(c(1,rho,rho,1),nrow=2)
mean.var.plot(mu, sigma, Rho)
rho <- 0.5
Rho <- matrix(c(1,rho,rho,1),nrow=2)
mean.var.plot(mu, sigma, Rho)
rho <- -0.5
Rho <- matrix(c(1,rho,rho,1),nrow=2)
mean.var.plot(mu, sigma, Rho)
rho <- -1
Rho <- matrix(c(1,rho,rho,1),nrow=2)
mean.var.plot(mu, sigma, Rho)
p = getSymbols("MALOX")
p
p = getSymbols("MALOX", auto.assign = FALSE)
p
head(p)
tail(p)
p = getSymbols("SPY", auto.assign = FALSE)
p
p = getSymbols("QQQ", auto.assign = FALSE)
p
p = getSymbols("IBM", auto.assign = FALSE)
head(p)
p = getSymbols("GS", auto.assign = FALSE)
head(p)
p = getSymbols("AAPL", auto.assign = FALSE)
p = getSymbols("RIG", auto.assign = FALSE)
p
plot(p)
head(p)
plot(p[,6])
p = getSymbols(c("RIG", "AAPL", auto.assign = FALSE)
)
p = getSymbols(c("RIG", "AAPL"), auto.assign = FALSE)
p = getSymbols(c("RIG", "AAPL"), auto.assign = T)
p
RIG
AAPL
cbind(RIG[,6], AAPL[,6])
AAPL[,6]
returns(AAPL[,6])
?returns
tickers <- c("AAPL","SPY", "QQQ", "XOM", "MMM", "HD")
prices <- NULL
for(t in tickers) {
p <- getSymbols(t, auto.assign = FALSE)
tmp <- returns(p[, 6])
names(tmp) <- t
if(is.null(prices)) {
prices <- tmp
} else {
prices <- cbind(prices, tmp)
}
}
head(prices)
names(tmp)
tmp
?colnames
colnames(prices)
colnames(prices) = 'a'
tickers <- c("AAPL","SPY", "QQQ", "XOM", "MMM", "HD")
daily.ret <- NULL
for(t in tickers) {
p <- getSymbols(t, auto.assign = FALSE)
tmp <- returns(p[, 6])
colnames(tmp) <- t
if(is.null(daily.ret)) {
daily.ret <- tmp
} else {
daily.ret <- cbind(daily.ret, tmp)
}
}
save(daily.ret)
save(daily.ret, file='daily.ret.rda')
head(daily.ret)
removeNA(daily.ret)
plot(exp(cumsum(daily.ret)))
exp(cumsum(daily.ret))
daily.ret
daily.ret <- removeNA(daily.ret)
exp(cumsum(daily.ret))
100*exp(cumsum(daily.ret))
plot(100*exp(cumsum(daily.ret)))
?cumsum
colCumsums(daily.ret)
exp(colCumsums(daily.ret))
plot(exp(colCumsums(daily.ret)))
head(exp(colCumsums(daily.ret)))
class(daily.ret)
as.timeSeries(daily.ret)
class(tmp)
class(p)
?returns
head(p)
w = p[,6]
class(w)
s = returns(w)
class(s)
Return.calculate(w)
a = Return.calculate(w)
class(a)
tickers <- c("AAPL","SPY", "QQQ", "XOM", "MMM", "HD")
daily.ret <- NULL
for(t in tickers) {
p <- getSymbols(t, auto.assign = FALSE)
tmp <- Return.calculate(p[, 6])
colnames(tmp) <- t
if(is.null(daily.ret)) {
daily.ret <- tmp
} else {
daily.ret <- cbind(daily.ret, tmp)
}
}
daily.ret <- removeNA(daily.ret)
save(daily.ret, file='daily.ret.rda')
head(daily.ret)
clas(daily.ret)
class(daily.ret)
cov(daily.ret)
head(daily.ret)
tail(daily.ret)
time(daily.ret)
time(daily.ret) < dmy("01jan2010")
idx <- time(daily.ret) < dmy("01jan2010")
daily.ret[idx,]
tail(daily.ret[idx,])
rep(1,3)
library(quadprog)
idx <- time(daily.ret) < dmy("01jan2010")
ret <- daily.ret[idx,]
# covariance matrix
Sigma <- cov(ret)
# expected return
mu <- colMeans(ret)
# constraints: 2 equality, 6 inequality
A.sum <- matrix(rep(1,6), ncol=1)
A.mat <- cbind(A.sum, mu, diag(6))
b <- c(1, mu.star, rep(0,6))
mu
idx <- time(daily.ret) < dmy("01jan2010")
ret <- daily.ret[idx,]
# covariance matrix
Sigma <- cov(ret)
# expected return
mu <- colMeans(ret)
mu.star <- 1.0e-3
# constraints: 2 equality, 6 inequality
A.sum <- matrix(rep(1,6), ncol=1)
A.mat <- cbind(A.sum, mu, diag(6))
b <- c(1, mu.star, rep(0,6))
qp <- solve.QP(Sigma, mu, A.mat, b, meq=2)
qp
sol <- qp$solution
names(sol) <- tickers
sol
sol <- round(sol, 4)
sol
A.sum <- matrix(rep(1,6), ncol=1)
A.mat <- cbind(A.sum, diag(6))
b <- c(1, rep(0,6))
qp <- solve.QP(Sigma, mu, A.mat, b, meq=1)
qp$solution
solve.QP
?solve.QP
# min variance portfolio - long only
A.sum <- matrix(rep(1,6), ncol=1)
A.mat <- cbind(A.sum, diag(6))
b <- c(1, rep(0,6))
qp <- solve.QP(Sigma, rep(0,6), A.mat, b, meq=1)
qp$solution
qp$solution*mu
sum(qp$solution*mu)
qp
Sigma
Sigma*252
x = c(min.ret, qp$value)
min.ret <- sum(qp$solution * mu)
x = c(min.ret, qp$value)
names(x) = c("return", "stdev")
x
# return at min variance
min.ret <- sum(qp$solution * mu)
x = c(min.ret, qp$value)
names(x) = c("return", "stdev")
kable(x)
library(knitr)
# return at min variance
min.ret <- sum(qp$solution * mu)
x = c(min.ret, qp$value)
names(x) = c("return", "stdev")
kable(x)
kable()
?kable
# return at min variance
min.ret <- sum(qp$solution * mu)
kable(c(min.ret, qp$value), row.names=c("return", "stdev"), col.names="MinVar Portfolio")
# return at min variance
min.ret <- sum(qp$solution * mu)
kable(matrix(c(min.ret, qp$value), ncol=1), row.names=c("return", "stdev"), col.names="MinVar Portfolio")
# return at min variance
min.ret <- sum(qp$solution * mu)
x <- matrix(c(min.ret, qp$value), ncol=1)
names(x) <- c("return", "stdev")
kable(x, col.names="MinVar Portfolio")
# return at min variance
min.ret <- sum(qp$solution * mu)
x <- matrix(c(min.ret, qp$value), ncol=1)
rownames(x) <- c("return", "stdev")
kable(x, col.names="MinVar Portfolio")
idx <- time(daily.ret) < dmy("01jan2010")
ret <- daily.ret[idx,]
# covariance matrix
Sigma <- cov(ret) * 252
# expected return
mu <- colMeans(ret) * 252
# min variance portfolio - long only
A.sum <- matrix(rep(1,6), ncol=1)
A.mat <- cbind(A.sum, diag(6))
b <- c(1, rep(0,6))
qp <- solve.QP(Sigma, rep(0,6), A.mat, b, meq=1)
# return at min variance
min.ret <- sum(qp$solution * mu)
x <- matrix(c(min.ret, sqrt(qp$value)), ncol=1)
rownames(x) <- c("return", "stdev")
kable(x, col.names="MinVar Portfolio")
mu
?seq
mu$AAPL
mu[1]
max(mu)
min(mu)
?seq
mu
mu.star <- seq(from=min(mu), to=max(mu), length.out=100)
sol <- NULL
for(mu.s in mu.star) {
# constraints: 2 equality, 6 inequality
A.sum <- matrix(rep(1,6), ncol=1)
A.mat <- cbind(A.sum, mu, diag(6))
b <- c(1, mu.s, rep(0,6))
qp <- solve.QP(Sigma, rep(0,6), A.mat, b, meq=2)
tmp <- matrix(c(mu.s, sqrt(qp$value), qp$solution), nrow=1)
if(is.null(sol)) {
sol <- tmp
} else {
sol <- rbind(sol, tmp)
}
}
mu.star
mu
x = matrix(c(0,1,0,0,0,0), ncol=1)
x
t(A.mat)
t(A.mat) %*% x
b
mu.s
t(A.mat) %*% x %>% b
t(A.mat) %*% x > b
?QP
?solve.QP
t(A.mat) %*% x >= b
sol
plot(sol[,c(1,2)])
plot(sol[,c(2,1)])
mu.star <- seq(from=min(mu)+abs(min(mu))/100, to=max(mu)-abs(max(mu))/100, length.out=100)
sol <- NULL
for(mu.s in mu.star) {
# constraints: 2 equality, 6 inequality
A.sum <- matrix(rep(1,6), ncol=1)
A.mat <- cbind(A.sum, mu, diag(6))
b <- c(1, mu.s, rep(0,6))
qp <- solve.QP(Sigma, rep(0,6), A.mat, b, meq=2)
tmp <- matrix(c(mu.s, sqrt(qp$value), qp$solution), nrow=1)
if(is.null(sol)) {
sol <- tmp
} else {
sol <- rbind(sol, tmp)
}
}
mu.free = .01
names(sol)
sol
colnames(sol)
paste(c(1,2,3), "q")
paste(c(1,2,3), "q", sep=Â¨)
paste(c(1,2,3), "q", sep="")
paste("w", seq(6), sep="")
tickers
colnames(sol) <- c("mu", "stdev", tickers)
head(sol)
sol$mu
sol[,"mu"]
mu.free <- 0.01
sharpe <- (sol[,"mu"] - mu.free) / sol[,"stdev"]
idx <- which.max(sharpe)
idx
plot(sharpe)
plot(sol[,"stdev"], sol[,"mu"])
plot(sol[,"stdev"], sol[,"mu"], type='l')
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red')
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', width=2)
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', lwd=2)
mu.free <- 0.01
sharpe <- (sol[,"mu"] - mu.free) / sol[,"stdev"]
idx <- which.max(sharpe)
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', lwd=2, xlab="stdev", ylab="E(return)")
for(i in seq_along(tickers)) {
text(sqrt(Sigma[i,i]), mu[i], tickers[i], cex=1.2)
}
head(sol)
mu.free <- 0.01
sharpe <- (sol[,"mu"] - mu.free) / sol[,"stdev"]
idx <- which.max(sharpe)
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', lwd=2, xlab="stdev", ylab="E(return)")
for(i in seq_along(tickers)) {
text(sqrt(Sigma[i,i]), mu[i], tickers[i], cex=1.2)
}
mu
diag(Sigma)
sqrt(diag(Sigma))
?cov
mu.free <- 0.01
sharpe <- (sol[,"mu"] - mu.free) / sol[,"stdev"]
idx <- which.max(sharpe)
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', lwd=2, xlab="stdev", ylab="E(return)",
xlim=c(-0.02, 0.50))
for(i in seq_along(tickers)) {
text(sqrt(Sigma[i,i]), mu[i], tickers[i], cex=1.2)
}
mu.free <- 0.01
sharpe <- (sol[,"mu"] - mu.free) / sol[,"stdev"]
idx <- which.max(sharpe)
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', lwd=2, xlab="stdev", ylab="E(return)",
ylim=c(-0.02, 0.50))
for(i in seq_along(tickers)) {
text(sqrt(Sigma[i,i]), mu[i], tickers[i], cex=1.2)
}
sqrt(diag(Sigma))
mu
mu.free <- 0.01
sharpe <- (sol[,"mu"] - mu.free) / sol[,"stdev"]
idx <- which.max(sharpe)
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', lwd=2, xlab="stdev", ylab="E(return)",
ylim=c(-0.02, 0.45), xlim=c(.18, 0.50))
for(i in seq_along(tickers)) {
text(sqrt(Sigma[i,i]), mu[i], tickers[i], cex=1.2)
}
?solve.QP
mu.star <- seq(from=min(mu)+abs(min(mu))/100, to=max(mu)-abs(max(mu))/100, length.out=100)
sol <- NULL
for(mu.s in mu.star) {
# constraints: 2 equality, 6 inequality
A.sum <- matrix(rep(1,6), ncol=1)
A.mat <- cbind(A.sum, mu, diag(6))
b <- c(1, mu.s, rep(0,6))
qp <- solve.QP(Sigma, rep(0,6), A.mat, b, meq=2)
tmp <- matrix(c(mu.s, sqrt(2*qp$value), qp$solution), nrow=1)
if(is.null(sol)) {
sol <- tmp
} else {
sol <- rbind(sol, tmp)
}
}
colnames(sol) <- c("mu", "stdev", tickers)
mu.free <- 0.01
sharpe <- (sol[,"mu"] - mu.free) / sol[,"stdev"]
idx <- which.max(sharpe)
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', lwd=2, xlab="stdev", ylab="E(return)",
ylim=c(-0.02, 0.45), xlim=c(.18, 0.50))
for(i in seq_along(tickers)) {
text(sqrt(Sigma[i,i]), mu[i], tickers[i], cex=1.2)
}
mu.free <- 0.01
sharpe <- (sol[,"mu"] - mu.free) / sol[,"stdev"]
idx <- which.max(sharpe)
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', lwd=2, xlab="stdev", ylab="E(return)",
ylim=c(-0.02, 0.45), xlim=c(.24, 0.50))
for(i in seq_along(tickers)) {
text(sqrt(Sigma[i,i]), mu[i], tickers[i], cex=1.2)
}
idx
plot(sharpe)
inv(Sigma)
inverse(Sigma)
solve(Sigma)
t(mu) * solve(Sigma) * mu
mu
mu * solve(Sigma) * t(mu)
mu %*% solve(Sigma) %*% t(mu)
mu <- as.matrix(mu, ncol=1)
mu
t(mu) %*% solve(Sigma) %*% mu
ones(3)
one(3)
matrix(1,6,1)
ones <- matrix(1,6,1)
mu
as.vector(mu)
w = as.vector(mu)
t(w)
w
w %*% Sigma
t(w)
t(t(w))
?as.vector
mu.m <- as.matrix(mu, ncol=1)
ones <- matrix(1, 6,1)
r.sharpe <- (t(mu.m) %*% solve(Sigma) %*% mu) / (t(ones) %*% solve(Sigma) %*% mu.m)
r.sharpe
mu
mu.m <- as.matrix(mu, ncol=1)
ones <- matrix(1, 6,1)
r.sharpe <- (t(mu.m) %*% solve(Sigma) %*% mu.m) / (t(ones) %*% solve(Sigma) %*% mu.m)
r.sharpe
mu.m <- as.matrix(mu - mu.free, ncol=1)
ones <- matrix(1, 6,1)
r.sharpe <- (t(mu.m) %*% solve(Sigma) %*% mu.m) / (t(ones) %*% solve(Sigma) %*% mu.m)
r.sharpe
Sigma
mu.free <- 0.01
sharpe <- (sol[,"mu"] - mu.free) / sol[,"stdev"]
idx <- which.max(sharpe)
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', lwd=2, xlab="stdev", ylab="E(return)",
ylim=c(-0.02, 0.45), xlim=c(.24, 0.50))
for(i in seq_along(tickers)) {
text(sqrt(Sigma[i,i]), mu[i], tickers[i], cex=1.2)
}
mu.m <- as.matrix(mu - mu.free, ncol=1)
ones <- matrix(1, 6,1)
r.sharpe <- (t(mu.m) %*% solve(Sigma) %*% mu.m) / (t(ones) %*% solve(Sigma) %*% mu.m)
qp$solution
sum(qp$solution)
sum(qp$solution*mu)
sol[,"mu"]
diff(sol[,"mu"])
mu2 <- mu - mu.free
w <- solve(Sigma, mu2)
w <- w / sum(w)
w
sum(w*mu)
w
sum(w)
mu.excess <- mu - mu-free
mu.excess <- mu - mu.free
A.mat <- as.matrix(mu.excess)
b <- 1
sol.sharpe <- solve.QP(Sigma, matrix(0,6,1), A.mat, b, meq=1)
w <- as.matrix(sol.sharpe$solution/sum(sol.sharpe$solution))
w
t(w) %*% mu
mu.excess <- mu - mu.free
A.mat <- cbind(mu.excess, diag(6))
b <- c(1, rep(0,6))
sol.sharpe <- solve.QP(Sigma, matrix(0,6,1), A.mat, b, meq=1)
w <- as.matrix(sol.sharpe$solution/sum(sol.sharpe$solution))
w
t(w) %*% mu
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', lwd=2, xlab="stdev", ylab="E(return)",
ylim=c(-0.02, 0.45), xlim=c(.24, 0.50))
for(i in seq_along(tickers)) {
text(sqrt(Sigma[i,i]), mu[i], tickers[i], cex=1.2)
}
mu.star <- seq(from=min(mu)+abs(min(mu))/100, to=max(mu)-abs(max(mu))/100, length.out=100)
mu.free <- 0.04
sol <- NULL
for(mu.s in mu.star) {
# constraints: 2 equality, 6 inequality
A.sum <- matrix(rep(1,6), ncol=1)
A.mat <- cbind(A.sum, mu, diag(6))
b <- c(1, mu.s, rep(0,6))
qp <- solve.QP(Sigma, rep(0,6), A.mat, b, meq=2)
tmp <- matrix(c(mu.s, sqrt(2*qp$value), qp$solution), nrow=1)
if(is.null(sol)) {
sol <- tmp
} else {
sol <- rbind(sol, tmp)
}
}
colnames(sol) <- c("mu", "stdev", tickers)
# tangency portfolio with long only - max constrained sharpe ratio
mu.excess <- mu - mu.free
A.mat <- cbind(mu.excess, diag(6))
b <- c(1, rep(0,6))
sol.sharpe <- solve.QP(Sigma, matrix(0,6,1), A.mat, b, meq=1)
w <- as.matrix(sol.sharpe$solution/sum(sol.sharpe$solution))
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', lwd=2, xlab="stdev", ylab="E(return)",
ylim=c(-0.02, 0.45), xlim=c(.24, 0.50))
for(i in seq_along(tickers)) {
text(sqrt(Sigma[i,i]), mu[i], tickers[i], cex=1.2)
}
plot(sol[,"stdev"], sol[,"mu"], type='l', col='red', lwd=2, xlab="stdev", ylab="E(return)",
ylim=c(-0.02, 0.45), xlim=c(.24, 0.50))
for(i in seq_along(tickers)) {
text(sqrt(Sigma[i,i]), mu[i], tickers[i], cex=1.2, col="blue")
}
w
mu
plot(AAPL)
head(AAPL)
Ad(AAPL)
plot(Ad(AAPL))
head(ret)
colMeans(ret)
colMeans(ret)*252
colVars(ret)*252
colVars(ret)*252
