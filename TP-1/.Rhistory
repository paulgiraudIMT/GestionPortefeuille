library(quadprog)
# list of required libraries
library(tseries)
library(timeSeries)
library(quantmod)
library(xts)
library(hornpa)
library(lubridate)
library(xtable)
library(PerformanceAnalytics)
library(TTR)
library(SuppDists)
library(roll)
library(Hmisc)
library(nFactors)
library(quadprog)
library(portfolioBacktest)
library(PortfolioAnalytics)
knitr::opts_chunk$set(echo = FALSE)
get.src.folder <- function() {
path.expand("../GP/src")
}
get.data.folder <- function() {
path.expand("../GP/data")
}
library(lubridate)
source(file.path(get.src.folder(), 'utils.R'))
drawlogaxis <- function(side,range)
{
par(tck=0.02)
#	d <- log(range,10)
d <- range
mlog <- floor(min(d))
Mlog <- ceiling(max(d))
SeqLog <- c(mlog:Mlog)
Nlog <- (Mlog-mlog)+1
axis(side,at=SeqLog,labels=10^SeqLog)
ats <- log(seq(from=2,to=9,by=1),10)
mod <- NULL
for(i in SeqLog)
{
mod <- c(mod,rep(i,length(ats)))
}
ats <- rep(ats,Nlog)
ats <- ats+mod
par(tck=0.02/3)
axis(side,at=ats,labels=NA)
}
#Exercice 1 Question 8
puissancetestn <- c()
install.packages("learnr")
knitr::opts_chunk$set(echo = FALSE)
library(lubridate)
library(Hmisc)
library(tseries)
library(timeSeries)
get.src.folder <- function() {
path.expand("../GP/src")
}
get.data.folder <- function() {
path.expand("../GP/data")
}
source(file.path(get.src.folder(), 'utils.R'))
knitr::opts_chunk$set(echo = FALSE)
library(lubridate)
library(Hmisc)
library(tseries)
library(timeSeries)
get.src.folder <- function() {
path.expand("../GP/src")
}
get.data.folder <- function() {
path.expand("../GP/data")
}
source(file.path(get.src.folder(), 'utils.R'))
install.packages("fields")
knitr::opts_chunk$set(echo = FALSE)
library(lubridate)
library(Hmisc)
library(tseries)
library(timeSeries)
get.src.folder <- function() {
path.expand("../GP/src")
}
get.data.folder <- function() {
path.expand("../GP/data")
}
source(file.path(get.src.folder(), 'utils.R'))
knitr::opts_chunk$set(echo = FALSE)
library(lubridate)
library(Hmisc)
library(tseries)
library(timeSeries)
get.src.folder <- function() {
path.expand("../GP/src")
}
get.data.folder <- function() {
path.expand("../GP/data")
}
source(file.path(get.src.folder(), 'utils.R'))
source(file.path(get.src.folder(), 'FileUtils.R'))
ts.all <- get.all.ts('CAC40', tickers=NULL, returns = TRUE,
dt.start = dmy('01Jul2007'), combine = T)
# bad data for Valeo
ts.all <- ts.all[,-17]
# keep good data window
ts.all <- window(ts.all, dmy('01Jul2007'),
dmy('01Jan2009'))
# merge with cac40 index
cac.index <- get.ts('fchi', 'CAC40')
cac.ret <- returns(cac.index)
names(cac.ret) <- 'CAC40'
ts.all <- removeNA(cbind(ts.all, cac.ret))
plot(ts.all[, c(1,2,3)], main='Rendement quotidien')
# flag bad data points: > * \sigma
good.limit <- 8*apply(ts.all, 2, sd)
ts.bad <- ts.all*FALSE
for(j in seq(ncol(ts.bad))) {
ts.bad[,j] <- abs(ts.all[,j]) > good.limit[j]
}
good.index <- !apply(ts.bad,1,any)
ts.all <- ts.all[good.index,]
# aggregate returns by week
by <- timeSequence(from=start(ts.all),
to=end(ts.all), by='week')
ts.all.weekly <- aggregate(ts.all, by, sum)
ts.stocks <- ts.all.weekly[,-40]
ts.index <- ts.all.weekly[,40]
plot(ts.index, main='Rendement hebdomadaire de l\'indice CAC40')
tinytex::install_tinytex()
